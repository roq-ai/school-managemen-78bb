generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model academic_year {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year            Int
  start_date      DateTime       @db.Date
  end_date        DateTime       @db.Date
  organization_id String         @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  organization    organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Renamedclass    Renamedclass[]
}

model assignment {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String       @db.VarChar(255)
  description  String       @db.VarChar(255)
  due_date     DateTime     @db.Date
  class_id     String       @db.Uuid
  teacher_id   String       @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  Renamedclass Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user         @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model attendance {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date         DateTime     @db.Date
  status       String       @db.VarChar(20)
  class_id     String       @db.Uuid
  student_id   String       @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  Renamedclass Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user         @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String        @db.VarChar(50)
  section          String        @db.VarChar(50)
  academic_year_id String        @db.Uuid
  teacher_id       String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  assignment       assignment[]
  attendance       attendance[]
  academic_year    academic_year @relation(fields: [academic_year_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user          @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("class")
}

model organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  academic_year academic_year[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  assignment   assignment[]
  attendance   attendance[]
  Renamedclass Renamedclass[]
  organization organization[]
}
